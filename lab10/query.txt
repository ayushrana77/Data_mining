# -*- coding: utf-8 -*-
"""K_Anonymity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zo0-El9V_Guequ7Mu-VX21kOq9-R2S4n
"""

import pandas as pd
import numpy as np

df = pd.read_csv("adult.csv")

df

cols = ['age', 'education', 'race', 'sex', 'relationship']
released_data = df[cols]
released_data.head()

def isAnony(r, k):
    counts = r.groupby(cols).size()
    counts_k = counts[counts < k]
    return len(counts_k)

isAnony(released_data, 3)

released_data['age'].unique()

released_data["education"].unique()

released_data["relationship"].unique()

def a_age(age):
    if age < 30:
        return "young"
    elif age < 50:
        return "middle_aged"
    else: return "old"

def a_education(education):
    if education == "Bachelors" or education == "Masters":
        return "Higher Studies"
    else: return "Lower Studies"

def a_race(race):
  return "Any Race"

def a_sex(sex):
  return "Any Sex"

def a_relationship(relationship):
  family = ['Husband', 'Wife', 'Own-child']
  if relationship in family:
    return "family"
  else:
    return "Non-family"

released_data['age'] = released_data['age'].apply(a_age)
released_data['education'] = released_data['education'].apply(a_education)
released_data['race'] = released_data['race'].apply(a_race)
released_data['sex'] = released_data['sex'].apply(a_sex)
released_data['relationship'] = released_data['relationship'].apply(a_relationship)
released_data.head()

val = isAnony(released_data, 3)

tot = len(released_data)
if val < 0.001*tot:
  print("Dataset anonymized successfully.")
  print(released_data)
else:
  print("K-anonymization property not satisfied.")

released_data.to_csv('k_anonymity_output.csv', index=False)

"""X-Y anonymity"""

df["income"].unique()

y = df["income"]

y.head()

merged_df = pd.concat([released_data, y], axis=1)
merged_df.head()

def x_yanony(k, cols):
    counts = merged_df.groupby(cols)['income'].nunique()
    counts_k = counts[counts<k]
    return len(counts_k)

val = x_yanony(2, cols)

if val > 0:
    print("Does not Satisfy the X-Y Anonymity")
else:
    print("Satisfy X-Y Anonymity")
    print(merged_df)

"""X-Y Linkability"""

def linkThresh(df):
    groups = df.groupby(cols)
    max_threshold = 0.0
    for names, grps in groups:
        fractions = grps.iloc[:,-1].value_counts()
        rows = len(grps)
        values = fractions/rows
        max_threshold = values.max()
    return max_threshold

val = linkThresh(merged_df)
print("linkThreshold = ",val)

"""L-Diversity"""

def entropyL(df):
  groups = df.groupby(cols)
  l = 100
  for names, grps in groups:
    # print("new group")
    counts = grps.iloc[:,-1].value_counts()
    rows = len(grps)
    log_val = 0.0
    for item in counts:
      log_val += -(item/rows)*np.log2(item/rows)
      # print(log_val)
    l = min(l, log_val)
  return l


print("entropy = ",entropyL(merged_df))

data = df[cols]


def add_noise(df, age, noise=5):
    df[age] = df[age] + np.random.randint(-noise, noise, df.shape[0])
    return df

add_noise(data, 'age')
print("noise added succesfully")
print(data)

def swapping(df):
    df['relationship'] = df['relationship'].sample(frac=1).reset_index(drop=True)
    return df

data['education'] = data['education'].apply(a_education)
print("generalization done succesfully")
print(data)

swapping(data)
print("swapping done succesfully")
print(data)
